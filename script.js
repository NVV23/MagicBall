// –°–ø–∏—Å–æ–∫ –æ—Ç–≤–µ—Ç–æ–≤
const ANSWERS = [
    "–î–∞", "–ù–µ—Ç", "–í–æ–∑–º–æ–∂–Ω–æ", "–°–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ –¥–∞", "–°–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ –Ω–µ—Ç",
    "–Ø —É—Å—Ç–∞–ª, —Å–ø—Ä–æ—Å–∏ –ø–æ–∑–∂–µ", "–ê —Å–∞–º –∫–∞–∫ –¥—É–º–∞–µ—à—å?", "–î–∞, —Ö–æ—Ç—è –Ω–µ—Ç",
    "100%", "–ú–∞–ª–æ–≤–µ—Ä–æ—è—Ç–Ω–æ", "–û–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω–æ –¥–∞!", "–°–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ –Ω–µ—Ç", "–ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑", "–í—Å—ë –≤–æ–∑–º–æ–∂–Ω–æ", "–î–æ–≤–µ—Ä—å—Å—è —Å—É–¥—å–±–µ",
    "–ñ–¥–∏ —á—É–¥–∞", "–ë–µ–∑ —Å–æ–º–Ω–µ–Ω–∏–π", "–ù–µ—Ç, –∏ –Ω–µ –Ω–∞–¥–µ–π—Å—è",
    "–ú–æ–∂–µ—Ç –±—ã—Ç—å –∑–∞–≤—Ç—Ä–∞","–ù–µ —Ç–æ—Ä–æ–ø–∏ —Å–æ–±—ã—Ç–∏—è", "–≠—Ç–æ —Ç–≤–æ–π –≤—ã–±–æ—Ä", "–°–ø—Ä–æ—Å–∏ —É –¥—Ä—É–≥–æ–≥–æ —à–∞—Ä–∞",
    "–Ø –≤ —ç—Ç–æ–º —É–≤–µ—Ä–µ–Ω", "–¢—ã —Å–∞–º –∑–Ω–∞–µ—à—å –æ—Ç–≤–µ—Ç", "–®–∞–Ω—Å—ã —Ä–∞–≤–Ω—ã",
    "–î–µ–π—Å—Ç–≤—É–π —Å–º–µ–ª–æ", "–†–∏—Å–∫–Ω–∏", "–≠—Ç–æ —Ç–∞–π–Ω–∞",
    "–ü–æ–¥–æ–∂–¥–∏ –Ω–µ–º–Ω–æ–≥–æ", "–¢–µ–±–µ —Ä–µ—à–∞—Ç—å", "–ù–µ —Å—Ç–æ–∏—Ç —Å–æ–º–Ω–µ–≤–∞—Ç—å—Å—è",
    "–°–ª–∏—à–∫–æ–º —Ä–∞–Ω–æ", "–ó–≤—ë–∑–¥—ã –º–æ–ª—á–∞—Ç", "–¢—ã –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø—É—Ç–∏",
    "–ü–æ—á–µ–º—É –±—ã –∏ –Ω–µ—Ç?", "–°–ª—É—à–∞–π —Å–≤–æ—ë —Å–µ—Ä–¥—Ü–µ—á–∫–æ", "–≠—Ç–æ –ø–ª–æ—Ö–∞—è –∏–¥–µ—è"
];

// DOM-—ç–ª–µ–º–µ–Ω—Ç—ã
const ball = document.getElementById('ball');
const answerElement = document.getElementById('answer');
const shakeButton = document.getElementById('shakeButton');
const bounceSound = document.getElementById('bounceSound'); // –ó–≤—É–∫ —É–¥–∞—Ä–∞
const soundButton = document.getElementById('soundButton'); // –ö–Ω–æ–ø–∫–∞ –∑–≤—É–∫–∞

// –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–≤–∏–∂–µ–Ω–∏—è
let x = window.innerWidth / 2 - 75, y = window.innerHeight / 2 - 75;
let dx = 0, dy = 0, isStopped = true;
let isAnimating = false;

const initialSpeed = 4; // –£–º–µ–Ω—å—à–∏–ª–∏ —Å–∫–æ—Ä–æ—Å—Ç—å –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö
const constantSpeedDuration = 2000;

// –§–ª–∞–≥ –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –∑–≤—É–∫–∞
let isSoundEnabled = false; // –ó–≤—É–∫ –≤—ã–∫–ª—é—á–µ–Ω –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

// –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∑–≤—É–∫–∞ –∫ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—é
function preloadAudio() {
    if (isSoundEnabled) {
        bounceSound.play().catch(() => {}); // –ü—ã—Ç–∞–µ–º—Å—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ –∑–≤—É–∫
        bounceSound.pause(); // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ
        bounceSound.currentTime = 0; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—Ä–µ–º—è
    }
}

// –í—ã–∑—ã–≤–∞–µ–º –ø–æ–¥–≥–æ—Ç–æ–≤–∫—É –∑–≤—É–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
window.addEventListener('DOMContentLoaded', () => {
    preloadAudio();
    soundButton.textContent = 'üîá'; // –ó–Ω–∞—á–æ–∫ –≤—ã–∫–ª—é—á–µ–Ω–Ω–æ–≥–æ –∑–≤—É–∫–∞
    soundButton.classList.add('sound-off');

    // –†–∞—Å—à–∏—Ä—è–µ–º –æ–∫–Ω–æ Telegram Web App
    if (window.Telegram && Telegram.WebApp) {
        Telegram.WebApp.expand(); // –†–∞—Å—à–∏—Ä–µ–Ω–∏–µ –æ–∫–Ω–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    }
});

// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—É—é –ø–æ–∑–∏—Ü–∏—é —à–∞—Ä–∞
function setInitialPosition() {
    x = window.innerWidth / 2 - 75; // –¶–µ–Ω—Ç—Ä –ø–æ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª–∏
    y = window.innerHeight / 2 - 75; // –¶–µ–Ω—Ç—Ä –ø–æ –≤–µ—Ä—Ç–∏–∫–∞–ª–∏
    ball.style.transform = `translate(${x}px, ${y}px)`; // –ò—Å–ø–æ–ª—å–∑—É–µ–º transform
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ª—É—á–∞–π–Ω–æ–≥–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ –¥–∏–∞–≥–æ–Ω–∞–ª—è–º —Å –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ–º
function getRandomDirection() {
    const baseAngles = [
        Math.PI / 4,   // 45¬∞ (–ø—Ä–∞–≤–æ-–≤–µ—Ä—Ö)
        3 * Math.PI / 4, // 135¬∞ (–ª–µ–≤–æ-–≤–µ—Ä—Ö)
        5 * Math.PI / 4, // 225¬∞ (–ª–µ–≤–æ-–Ω–∏–∑)
        7 * Math.PI / 4  // 315¬∞ (–ø—Ä–∞–≤–æ-–Ω–∏–∑)
    ];
    const baseAngle = baseAngles[Math.floor(Math.random() * baseAngles.length)];
    const deviation = (Math.random() - 0.5) * (10 * Math.PI / 180); // ¬±10¬∞
    const angle = baseAngle + deviation;
    return {
        dx: Math.cos(angle),
        dy: Math.sin(angle)
    };
}

function startMovement() {
    if (!isStopped || isAnimating) return;

    isStopped = false;
    isAnimating = true;
    answerElement.classList.remove('show');
    ball.classList.remove('glow-active');
    disableShakeDetection();

    const direction = getRandomDirection();
    dx = direction.dx * initialSpeed;
    dy = direction.dy * initialSpeed;

    startTime = Date.now();
    requestAnimationFrame(moveBall);
}

let startTime = null;

function moveBall() {
    if (isStopped || !isAnimating) {
        isAnimating = false;
        return;
    }

    const currentTime = Date.now();

    if (currentTime - startTime < constantSpeedDuration) {
        x += dx;
        y += dy;
    } else {
        const elapsedTime = (currentTime - startTime - constantSpeedDuration) / 1000;
        const decelerationFactor = Math.max(0.95 - elapsedTime * 0.05, 0.1);
        x += dx * decelerationFactor;
        y += dy * decelerationFactor;
        dx *= decelerationFactor;
        dy *= decelerationFactor;
    }

    const ballSize = 150;
    let hitWall = false;

    if (x <= 0 || x >= window.innerWidth - ballSize) {
        dx = -dx;
        x = Math.max(0, Math.min(x, window.innerWidth - ballSize));
        hitWall = true;
    }
    if (y <= 0 || y >= window.innerHeight - ballSize) {
        dy = -dy;
        y = Math.max(0, Math.min(y, window.innerHeight - ballSize));
        hitWall = true;
    }

    if (hitWall && isSoundEnabled) {
        bounceSound.currentTime = 0;
        bounceSound.play().catch(() => {});
    }

    ball.style.transform = `translate3d(${x|0}px, ${y|0}px, 0)`;

    if (Math.abs(dx) < 0.3 && Math.abs(dy) < 0.3) {
        isStopped = true;
        isAnimating = false;
        answerElement.textContent = ANSWERS[Math.floor(Math.random() * ANSWERS.length)];
        answerElement.classList.add('show');
        ball.classList.add('glow-active');
        enableShakeDetection();
        return;
    }

    requestAnimationFrame(moveBall);
}

let lastShakeTime = 0;
const shakeCooldown = 800;
let isShakeDetectionActive = false;

function enableShakeDetection() {
    if (isShakeDetectionActive) return;
    isShakeDetectionActive = true;

    if (window.DeviceMotionEvent) {
        window.addEventListener('devicemotion', handleDeviceMotion, { passive: true });
    }
}

function disableShakeDetection() {
    if (!isShakeDetectionActive) return;
    isShakeDetectionActive = false;

    if (window.DeviceMotionEvent) {
        window.removeEventListener('devicemotion', handleDeviceMotion);
    }
}

function handleDeviceMotion(event) {
    if (!isStopped || isAnimating) return;
    
    const now = Date.now();
    if (now - lastShakeTime < shakeCooldown) return;

    const acc = event.accelerationIncludingGravity;
    if (!acc) return;

    const acceleration = Math.sqrt(acc.x * acc.x + acc.y * acc.y + acc.z * acc.z);

    if (acceleration > 30) {
        lastShakeTime = now;
        startMovement();
    }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–∫–∏
shakeButton.addEventListener('touchstart', (e) => {
    e.preventDefault();
    startMovement();
});
shakeButton.addEventListener('click', (e) => {
    e.preventDefault();
    startMovement();
});

// –õ–æ–≥–∏–∫–∞ –∫–Ω–æ–ø–∫–∏ –∑–≤—É–∫–∞
soundButton.addEventListener('click', () => {
    isSoundEnabled = !isSoundEnabled;
    if (isSoundEnabled) {
        soundButton.textContent = 'üîä';
        soundButton.classList.remove('sound-off');
    } else {
        soundButton.textContent = 'üîá';
        soundButton.classList.add('sound-off');
    }
});

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
setInitialPosition();
enableShakeDetection(); // –í–∫–ª—é—á–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É —Ç—Ä—è—Å–∫–∏ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ